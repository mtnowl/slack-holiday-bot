// This file is auto-generated by @hey-api/openapi-ts

export const CountryInfoDtoSchema = {
    required: ['commonName', 'countryCode', 'officialName', 'region'],
    type: 'object',
    properties: {
        commonName: {
            type: 'string',
            description: 'CommonName',
            nullable: true
        },
        officialName: {
            type: 'string',
            description: 'OfficialName',
            nullable: true
        },
        countryCode: {
            type: 'string',
            description: 'CountryCode',
            nullable: true
        },
        region: {
            type: 'string',
            description: 'Region',
            nullable: true
        },
        borders: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CountryInfoDto'
            },
            description: 'Country Borders',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'CountryInfo Dto'
} as const;

export const CountryV3DtoSchema = {
    required: ['countryCode', 'name'],
    type: 'object',
    properties: {
        countryCode: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Country'
} as const;

export const HolidayTypesSchema = {
    enum: ['Public', 'Bank', 'School', 'Authorities', 'Optional', 'Observance'],
    type: 'string'
} as const;

export const LongWeekendV3DtoSchema = {
    type: 'object',
    properties: {
        startDate: {
            type: 'string',
            description: 'StartDate',
            format: 'date-time'
        },
        endDate: {
            type: 'string',
            description: 'EndDate',
            format: 'date-time'
        },
        dayCount: {
            type: 'integer',
            description: 'DayCount',
            format: 'int32'
        },
        needBridgeDay: {
            type: 'boolean',
            description: 'NeedBridgeDay'
        }
    },
    additionalProperties: false,
    description: 'Long Weekend'
} as const;

export const PublicHolidayV3DtoSchema = {
    required: ['countryCode', 'localName', 'name', 'types'],
    type: 'object',
    properties: {
        date: {
            type: 'string',
            description: 'The date',
            format: 'date'
        },
        localName: {
            type: 'string',
            description: 'Local name',
            nullable: true
        },
        name: {
            type: 'string',
            description: 'English name',
            nullable: true
        },
        countryCode: {
            type: 'string',
            description: 'ISO 3166-1 alpha-2',
            nullable: true
        },
        fixed: {
            type: 'boolean',
            description: 'Is this public holiday every year on the same date',
            deprecated: true
        },
        global: {
            type: 'boolean',
            description: 'Is this public holiday in every county (federal state)'
        },
        counties: {
            type: 'array',
            items: {
                type: 'string'
            },
            description: 'ISO-3166-2 - Federal states',
            nullable: true
        },
        launchYear: {
            type: 'integer',
            description: 'The launch year of the public holiday',
            format: 'int32',
            nullable: true
        },
        types: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/HolidayTypes'
            },
            description: 'A list of types the public holiday it is valid',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Public Holiday'
} as const;

export const VersionInfoDtoSchema = {
    required: ['name', 'version'],
    type: 'object',
    properties: {
        name: {
            type: 'string',
            description: 'Name',
            nullable: true
        },
        version: {
            type: 'string',
            description: 'Version',
            nullable: true
        }
    },
    additionalProperties: false,
    description: 'Version Info Dto'
} as const;